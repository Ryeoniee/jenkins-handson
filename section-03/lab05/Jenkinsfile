
def notifySlack(STATUS, COLOR) {
	slackSend (channel: '#my-channel', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}

pipeline {
  agent any

  options {
    buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '4'))
    disableConcurrentBuilds()
  }
  
  tools {
    maven 'maven'
  }
  
  environment {
      NEW_VERSION = "1.3.0"
      dockerRegistry="https://index.docker.io/v1/"
      tag="0.1.2"
      image="nexweb1/sample"
      baseDir="."
  }

  stages {
    stage("git-clone") {
      steps {
        script {
          notifySlack("Started", "#00FF00")
        }        
        echo "Git clone from gitlab repository"
        //git branch: 'dev', credentialsId: 'github_access_token', url: 'https://github.com/yoonjk/jenkins-handson.git'
        git url: 'https://gitlab.com/nexweb/jenkins-handson.git', branch: 'dev'
      }
    }

    stage("build") {
      steps {
        echo "Building the application..."   
        sh "mvn clean package -Dmaven.testSkips=true "
      }
    }

    stage("inspect code") {
      steps {
        echo "inspecting the application..."
        withSonarQubeEnv('sonarqube') {
          sh ("""
            mvn sonar:sonar \
						-Dsonar.projectName=sample-service \
						-Dsonar.projectKey=sample-service \
            -Dsonar.report.export.path=sonar-report.json \
            -Dsonar.sources=src/main/java \
            -Dsonar.projectBaseDir=${baseDir} \
						-Dsonar.language=java \
            -Dsonar.java.sourcesion=1.0 \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.java.binaries=target/classes \
						-Dsonar.host.url=http://119.81.97.213:9000 \
						-Dsonar.login=sqp_7131cd74a892ad252b3adf2908ab31d647e8e673
          """)       
        }
      }
    }

    stage('SonarQube Quality Gate'){
      steps{
        timeout(time: 10, unit: 'MINUTES') {
          script{
            echo "Start SonarQube Quality Gate"
            def qualityGate = waitForQualityGate()
            echo "Status: ${qualityGate.status}"

            if(qualityGate.status != 'OK') {
              echo "NOT OK Status: ${qualityGate.status}"
              error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
            } else{
              echo "OK Status: ${qualityGate.status}"
            }
            echo "End SonarQube Quality Gate"
          }
        }
      }
    }   
    

    stage("build and push image") {
      steps {
        echo "Building and push the image..."
        withCredentials ([
          usernamePassword(
            credentialsId: 'docker-credentials',
            usernameVariable: 'DOCKER_HUB_USER', 
            passwordVariable: 'DOCKER_HUB_PASSWORD'
          )
        ]) {
          echo "some credentials info : ${DOCKER_HUB_USER}, ${DOCKER_HUB_PASSWORD}"

					sh "podman login --tls-verify=false --username ${DOCKER_HUB_USER} --password ${DOCKER_HUB_PASSWORD} ${dockerRegistry}"
					sh "podman build -f ./deployment/Dockerfile -t ${image}:${tag} ."
					sh "podman tag ${image}:${tag} ${image}:hello"
					sh "podman push ${image}:hello"    
        }
      }
    }

    stage("deploy") {
      steps {
        echo "Deploying the application..."
      }
    }
  }

  post {
    success {
      script {
        notifySlack("${currentBuild.currentResult}", "#00FF00")
      }
    }

    failure {
      script {
        notifySlack("${currentBuild.currentResult}", "#FF0000")
      }
    }
  } 

}