

pipeline {
  agent {
    kubernetes {
      yamlFile 'deployment/pod-template.yaml'
      defaultContainer 'maven'
    }
  }

  tools {
    maven 'maven'
  }
  
  environment {
    NEW_VERSION = "1.3.0"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  
  stages {
    stage("git-clone") {
      steps {
        echo "Git clone from bitbucket repository"
        git credentialsId: 'bitbucket-credentials', branch: 'master', url: 'http://119.81.97.213:8990/scm/boot/jenkins-handson.git'
      }
    }

    stage("read properties") {
      steps {
        script {
          def props = readProperties  file:'deployment/pipeline.properties'
                
		      // Base Directory
          env['baseDir'] = props['baseDir']
          env['baseDeployDir'] = props['baseDeployDir']

		      // Docker Hub Info.
          env['tag'] = props['version']
          env['dockerRegistry'] = props['dockerRegistry']
          env['credentialRegistry']=props['credentialRegistry']
          env['image'] = props['image']
              
		      // Kubernetes
          env['deployment'] = props['deployment']
          env['config'] = props['config']
          env['service'] = props['service']
          env['ingress'] = props['ingress']
          env['selector_key'] = props['selector_key']
          env['selector_val'] = props['selector_val']
          env['namespace'] = props['namespace'] 
        }
      }
    }

    stage("build") {
      steps {
        echo "Building the application..."   
        sh "mvn clean package -Dmaven.testSkips=true "
      }
    }

    stage("inspect code") {
      steps {
        echo "inspecting the application..."
      }
    }

    stage("build and push image") {
      steps {
        container('docker') {
          echo "Building and push the image..."
          withCredentials ([
            usernamePassword(
              credentialsId: 'docker-credentials',
              usernameVariable: 'DOCKER_HUB_USER', 
              passwordVariable: 'DOCKER_HUB_PASSWORD'
            )
          ]) {
            echo "some credentials info : ${DOCKER_HUB_USER}, ${DOCKER_HUB_PASSWORD}"
  
            sh "docker login  --username ${DOCKER_HUB_USER} --password ${DOCKER_HUB_PASSWORD} ${dockerRegistry}"
            sh "docker build -f ./deployment/Dockerfile -t ${image}:${tag} ."
            sh "docker tag ${image}:${tag} ${image}:hello"
            sh "docker push ${image}:hello"    
          }
        }
      }
    }

		stage( "Clean Up Existing Deployments" ) {
      steps {
        container('kubectl') {
          sh "kubectl delete deployments -n ${namespace} --selector=${selector_key}=${selector_val}"
        }
      }
		}

		// Deploy App to Cluster in Kubernetes
		stage( "Deploy to Cluster" ) {
      steps {
        container('kubectl') {
          sh "kubectl apply -n ${namespace} -f ${deployment}"
          sh "sleep 5"
          sh "kubectl apply -n ${namespace} -f ${service}"
        }
      }
		}
  }
}